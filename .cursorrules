# Project-Specific Instructions for Cursor AI

## General Guidelines
- Write clear, readable, and well-documented Python code
- Follow PEP 8 style guidelines for code formatting
- Use type hints consistently throughout the codebase
- Implement proper error handling and logging

## Code Structure
- Organize code using feature-based architecture:
  - `src/api/` - API endpoints and routers
  - `src/services/` - Business logic and service layer
  - `src/models/` - Data models and schemas
  - `src/utils/` - Utility functions and helpers
- Use async/await patterns consistently
- Implement proper dependency injection

## FastAPI Implementation
- Use FastAPI router for endpoint organization
- Implement proper request/response models using Pydantic
- Use proper HTTP status codes and error responses
- Include API documentation using FastAPI's built-in swagger

## Database Integration
- Use Motor for async MongoDB operations
- Implement connection pooling and proper connection management
- Use proper database indexing for optimization
- Implement database migration utilities

## Models and Schemas
- Use Pydantic models for data validation
- Implement proper model inheritance where applicable
- Include field validators and custom types
- Document all model fields

## Error Handling
- Use custom exception classes
- Implement proper error logging
- Return appropriate HTTP status codes
- Include detailed error messages for debugging

## Caching
- Implement TTL-based caching for appropriate endpoints
- Use proper cache invalidation strategies
- Document cache duration and strategy
- Implement force refresh mechanisms

## Security
- Store sensitive information in environment variables
- Implement proper input validation
- Use secure password hashing (bcrypt)
- Implement proper authentication/authorization

## Performance
- Implement database query optimization
- Use proper indexing strategies
- Implement connection pooling
- Use async operations where appropriate

## Testing
- Write unit tests using pytest
- Implement integration tests for API endpoints
- Use proper test fixtures and mocking
- Maintain minimum 80% test coverage

## Documentation
- Include docstrings for all functions and classes
- Follow Google style docstring format
- Document all API endpoints
- Maintain up-to-date README

## Logging
- Use proper logging levels
- Include contextual information in logs
- Implement proper error tracking
- Use structured logging format

## Data Processing
- Implement proper data validation
- Use pandas for data manipulation
- Implement proper error handling for data processing
- Use appropriate data types

## AI Integration
- Implement proper AI service integration
- Use async operations for AI processing
- Include proper error handling for AI services
- Document AI model versions and requirements

## Version Control
- Follow conventional commits specification
- Include meaningful PR descriptions
- Keep functions focused and single-responsibility
- Document breaking changes

## Dependencies
- Use specific version numbers in requirements
- Document third-party dependencies
- Implement proper dependency injection
- Keep dependencies up to date

