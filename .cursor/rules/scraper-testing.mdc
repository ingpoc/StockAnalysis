---
description: Scraper Testing Guidelines
globs: src/tests/**/*.py
alwaysApply: false
---
# Scraper Testing Guidelines
Use [test_scraper_single_card.py](mdc:StockAnalysis/tests/test_scraper_single_card.py) for testing the scraping functionality.

## Core Principles

1. **Isolation**: Test one functionality at a time (single card scraping)
2. **Real Implementation**: Use actual scraper code against real URLs
3. **Deterministic**: Focus on specific elements (first card - RANA SUGARS)
4. **End-to-End**: Test complete flow from scraping to database storage

## Data Validation Requirements

- **Structure Validation**: Ensure all required fields are present
- **Content Validation**: Compare with expected values from screenshots
- **Format Validation**: Verify data types and formatting
- **Database Validation**: Confirm correct storage structure:
  ```json
  {
    "company_name": "COMPANY_NAME",
    "symbol": "SYMBOL",
    "financial_metrics": [
      {
        "quarter": "QUARTER",
        "cmp": "PRICE",
        "revenue": "VALUE",
        "gross_profit": "VALUE",
        "net_profit": "VALUE",
        "revenue_growth": "PERCENTAGE",
        "gross_profit_growth": "PERCENTAGE",
        "net_profit_growth": "PERCENTAGE",
        "result_date": "DATE",
        "report_type": "TYPE"
        // Additional metrics...
      }
    ],
    "timestamp": "DATETIME"
  }
  ```

## Test Implementation

1. **Setup**: Initialize database connection and patch scraper to limit scope
2. **Execution**: Scrape the target URL, focusing on first card only
3. **Logging**: Record scraped data and validation results
4. **Validation**: Compare with expected metrics and database structure
5. **Cleanup**: Optionally remove test data from database

## Best Practices

- **Comprehensive Logging**: Log each step and all scraped data
- **Error Handling**: Catch and report exceptions clearly
- **State Restoration**: Restore any patched functions after testing
- **Environment Independence**: Use environment variables for configuration
- **Clean Exit**: Return appropriate exit codes based on test results