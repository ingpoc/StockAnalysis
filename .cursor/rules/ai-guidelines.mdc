---
description: AI Guidelines
globs: src/**/*.py, .env, requirements.txt, README.md
alwaysApply: false
---
---
description: AI Guidelines
globs: src/**/*.py, .env, requirements.txt, README.md
alwaysApply: false
---

# AI Development Guidelines

## Purpose
This rule provides guidance for AI assistance in developing the StockAnalysis application, covering key principles for project organization, code structure, and best practices.

## Project Structure
```
StockAnalysis/
├── src/                # Source code
├── tests/              # Test files
├── tools/scripts/      # Utility scripts
├── logs/               # Log files
├── db_backups/         # Database backups
├── docs/               # Documentation
```

## Key Development Principles
- ✓ Follow the project directory structure for all file placement
- ✓ Use absolute imports rather than relative imports
- ✓ Implement proper error handling with specific exceptions
- ✓ Maintain async operations throughout the application
- ✓ For database operations, refer to the database-validation rule

## Resource Management Best Practices
- ✓ Initialize all resources to None at the start of functions
- ✓ Use try/except/finally blocks for all resource operations
- ✓ Check for None before calling methods on objects
- ✓ Handle exceptions during resource cleanup
- ✓ Log all resource lifecycle events (creation, use, cleanup)
- ✓ Properly close async resources with error handling

## Async Error Handling
```python
async def async_operation():
    resource = None
    try:
        # Initialize resource
        resource = await create_resource()
        
        # Use resource
        result = await resource.operation()
        return result
        
    except SpecificError as e:
        logger.error(f"Specific error: {e}")
        return fallback_value
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return None
    finally:
        # Clean up resource safely
        if resource:
            try:
                await resource.close()
            except Exception as e:
                logger.warning(f"Error closing resource: {e}")
```

## API Implementation
- ✓ Register all endpoints with the central router
- ✓ Use appropriate status codes (200 for GET, 201 for POST)
- ✓ Implement validation with Pydantic models
- ✓ Handle errors with proper status codes and messages
- ✓ Document all endpoints with meaningful descriptions

## Database Guidelines
- ✓ Use the MongoDB collections defined in the project
- ✓ For validation, refer to `database-validation.mdc`
- ✓ Implement proper error handling for database operations
- ✓ Use connection pooling for better performance
- ✓ Implement proper indexing for frequently queried fields
- ✓ Always initialize db_clients to None and close in finally blocks

## Testing Approach
- ✓ For testing guidelines, refer to `testing-guidelines.mdc`
- ✓ For database validation, prefer direct MongoDB shell validation
- ✓ Use the validation utility script at `tools/scripts/validate_database.py`
- ✓ Keep tests isolated from production data by passing None instead of collections

## Example API Endpoint with Proper Error Handling
```python
from src.api import api_router
from src.models.schemas import StockResponse
from src.services.stock_service import StockService
from src.db.client import get_mongodb_client

@api_router.get("/stock/{symbol}", response_model=StockResponse)
async def get_stock(symbol: str):
    """
    Get detailed information for a specific stock.
    """
    db_client = None
    try:
        # Initialize services and resources
        db_client = await get_mongodb_client()
        stock_service = StockService(db_client)
        
        # Get the stock details
        return await stock_service.get_stock_details(symbol)
        
    except ValueError as e:
        # Handle validation errors
        raise HTTPException(status_code=400, detail=str(e))
    except LookupError as e:
        # Handle not found errors
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        # Handle unexpected errors
        logger.error(f"Error retrieving stock {symbol}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        # Clean up resources
        if db_client:
            try:
                await db_client.close()
            except Exception as e:
                logger.warning(f"Error closing database connection: {e}")
```

These guidelines ensure consistent, maintainable, and robust code across the StockAnalysis application.