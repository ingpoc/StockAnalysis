---
description: Utility Scripts Organization
globs: tools/scripts/*.py
alwaysApply: false
---
---
description: Utility Scripts Organization
globs: tools/scripts/*.py
alwaysApply: false
---

# Utility Scripts Organization

## Purpose
This rule provides guidance on organizing and implementing utility scripts for the StockAnalysis application, ensuring consistency and best practices.

## Key Principles
- ✓ Place all utility scripts in the `tools/scripts/` directory
- ✓ Name scripts according to their functionality (db_*, import_*, export_*, etc.)
- ✓ Implement proper logging to both console and file
- ✓ Handle errors gracefully with specific error messages
- ✓ Document script purpose and usage in docstrings
- ✓ Implement robust resource management with try/finally blocks

## Script Types
- Database management: `db_*.py`
- Data import/export: `import_*.py` or `export_*.py`
- Cleanup utilities: `clean_*.py`
- Backup utilities: `backup_*.py`
- Database validation: `validate_database.py`

## Resource Management
```python
# Initialize resources to None
db_client = None
file_handle = None

try:
    # Initialize resources
    db_client = AsyncIOMotorClient(mongo_uri)
    file_handle = open(output_file, 'w')
    
    # Use resources
    data = await db_client.get_database().collection.find({})
    for item in data:
        file_handle.write(json.dumps(item) + '\n')
        
except Exception as e:
    logger.error(f"Script failed: {e}")
    sys.exit(1)
finally:
    # Clean up resources
    if file_handle:
        try:
            file_handle.close()
        except Exception as e:
            logger.warning(f"Error closing file: {e}")
            
    if db_client:
        try:
            await db_client.close()
        except Exception as e:
            logger.warning(f"Error closing DB connection: {e}")
```

## Script Structure Example
```python
"""
Script to [description].

Usage:
    python -m tools.scripts.script_name [options]
"""
import asyncio
import logging
import argparse
import sys
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/script_name.log")
    ]
)
logger = logging.getLogger("script-name")

async def main():
    """Main entry point."""
    # Parse arguments
    parser = argparse.ArgumentParser(description="Script description")
    parser.add_argument("--option", help="Option description")
    args = parser.parse_args()
    
    # Initialize resources to None
    resource = None
    
    try:
        # Initialize and use resources
        resource = await setup_resource()
        result = await process_with_resource(resource)
        logger.info(f"Script completed successfully: {result}")
        return 0
    except Exception as e:
        logger.error(f"Script failed: {e}", exc_info=True)
        return 1
    finally:
        # Clean up resources
        if resource:
            try:
                await resource.close()
            except Exception as e:
                logger.warning(f"Error closing resource: {e}")

if __name__ == "__main__":
    load_dotenv()
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
```

## Error Handling Strategies
- Use specific exception types for different error conditions
- Log the full stack trace for unexpected errors
- Return appropriate exit codes (0 for success, non-zero for errors)
- Implement graceful degradation when possible
- Always clean up resources in finally blocks
- Provide user-friendly error messages

## Database Validation Script
For database validation, use the `validate_database.py` script which:
- Validates database collections without requiring test files
- Checks for missing required fields
- Verifies data integrity and relationships
- Reports issues in a readable format

Usage:
```bash
python -m tools.scripts.validate_database [--collection COLLECTION]
```

For detailed database validation guidelines, refer to the `database-validation.mdc` rule.

These guidelines ensure consistent, effective, and robust utility scripts across the application.