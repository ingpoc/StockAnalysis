---
description: API Contract Standards for StockAnalysis
globs: src/routers/**/*.py, src/models/**/*.py
alwaysApply: false
---
---
description: API Contract Standards for StockAnalysis
globs: src/routers/**/*.py, src/models/**/*.py
alwaysApply: false
version: 1.0.0
last_updated: 2024-03-02
---

# API Contract Standards

## Purpose
This document defines the contract between the StockAnalysis backend and frontend, ensuring consistent API design, standardized request and response structures, and proper error handling.

## API Response Format Standard

All API responses must follow this standard format:

### Success Response Format

```json
{
  "success": true,
  "message": "Human-readable success message",
  "data": {
    // Response data specific to the endpoint
  }
}
```

### Error Response Format

```json
{
  "success": false,
  "message": "Human-readable error message",
  "details": [
    {
      "loc": ["field_name"],
      "msg": "Error message for this field",
      "type": "error_type"
    }
  ]
}
```

## HTTP Status Codes

- **200 OK**: Request succeeded
- **201 Created**: Resource created successfully
- **400 Bad Request**: Invalid input or validation error
- **401 Unauthorized**: Authentication required or failed
- **403 Forbidden**: Authenticated but not authorized
- **404 Not Found**: Resource not found
- **422 Unprocessable Entity**: Request validation failed
- **500 Internal Server Error**: Server encountered an error
- **503 Service Unavailable**: Service temporarily unavailable

## API Endpoint Structure

### URL Path Conventions

- Resource paths: `/api/{resource}`
- Single resource by ID: `/api/{resource}/{id}`
- Sub-resources: `/api/{resource}/{id}/{sub-resource}`
- Actions on resources: `/api/{resource}/{action}`
- Versioned APIs: `/api/v{version}/{resource}`

### Common Endpoints

1. **GET /api/{resource}**
   - List resources with optional filtering
   - Response: Array of resources

2. **GET /api/{resource}/{id}**
   - Get a specific resource by ID
   - Response: Single resource object

3. **POST /api/{resource}**
   - Create a new resource
   - Request: Resource data
   - Response: Created resource

4. **PUT /api/{resource}/{id}**
   - Update a resource (full replacement)
   - Request: Complete resource data
   - Response: Updated resource

5. **PATCH /api/{resource}/{id}**
   - Partial update of a resource
   - Request: Partial resource data
   - Response: Updated resource

6. **DELETE /api/{resource}/{id}**
   - Delete a resource
   - Response: Success confirmation

## Example Endpoint Contracts

### Scraper API

#### POST /scraper/scrape

**Request:**
```json
{
  "stock": "RELIANCE"
}
```

**Response (200):**
```json
{
  "success": true,
  "message": "Successfully scraped data for RELIANCE",
  "data": {
    "stock": "RELIANCE",
    "metrics": {
      "pe": 25.6,
      "market_cap": 1500000000000,
      "book_value": 1100.5
    }
  }
}
```

**Error (400):**
```json
{
  "success": false,
  "message": "Invalid stock symbol",
  "details": [
    {
      "loc": ["stock"],
      "msg": "Stock symbol not found",
      "type": "value_error.not_found"
    }
  ]
}
```

#### POST /scraper/remove-quarter

**Request:**
```json
{
  "quarter": "Q1 FY22-23"
}
```

**Response (200):**
```json
{
  "success": true,
  "message": "Successfully removed quarter Q1 FY22-23",
  "data": {
    "documents_updated": 5
  }
}
```

**Error (400):**
```json
{
  "success": false,
  "message": "Invalid quarter format",
  "details": [
    {
      "loc": ["quarter"],
      "msg": "Quarter must be in format 'QX FYyy-yy'",
      "type": "value_error.format"
    }
  ]
}
```

### Market Data API

#### GET /market-data/company/{symbol}

**Response (200):**
```json
{
  "success": true,
  "message": "Successfully retrieved company data",
  "data": {
    "company": "RELIANCE",
    "name": "Reliance Industries Ltd.",
    "financial_data": [
      {
        "quarter": "Q1 FY22-23",
        "revenue": 2200000000000,
        "profit": 150000000000,
        "eps": 22.1
      },
      {
        "quarter": "Q2 FY22-23",
        "revenue": 2300000000000,
        "profit": 160000000000,
        "eps": 23.5
      }
    ]
  }
}
```

**Error (404):**
```json
{
  "success": false,
  "message": "Company not found",
  "details": [
    {
      "loc": ["symbol"],
      "msg": "Company symbol not found in database",
      "type": "value_error.not_found"
    }
  ]
}
```

#### GET /market-data/quarters

**Response (200):**
```json
{
  "success": true,
  "message": "Successfully retrieved available quarters",
  "data": {
    "quarters": [
      "Q1 FY22-23",
      "Q2 FY22-23",
      "Q3 FY22-23",
      "Q4 FY22-23",
      "Q1 FY23-24"
    ]
  }
}
```

## API Evolution and Versioning

### Versioning Strategy

- Major feature changes require a version increment
- Versions are specified in the URL path: `/api/v1/...`, `/api/v2/...`
- At least one previous version is supported after a new version is released

### Backward Compatibility

- Maintain backward compatibility within a version
- Do not remove fields from responses within the same version
- New optional fields can be added without version change
- New required fields require a version increment

### Deprecation Process

1. Mark endpoints as deprecated in documentation
2. Continue to support deprecated endpoints for at least 3 months
3. Provide migration path to new endpoints
4. Send deprecation warning in response headers

## Frontend Integration Guidelines

### Request Construction

```typescript
// Example TypeScript function for making API requests
async function apiRequest<T>(
  endpoint: string, 
  method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',
  data?: any
): Promise<T> {
  const response = await fetch(`/api${endpoint}`, {
    method,
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${getAuthToken()}`
    },
    body: data ? JSON.stringify(data) : undefined
  });
  
  const result = await response.json();
  
  if (!response.ok) {
    // Handle error responses according to the contract
    const error = new Error(result.message || 'An error occurred');
    error.details = result.details;
    throw error;
  }
  
  return result;
}
```

### Response Handling

```typescript
// Type definitions for standard response format
interface ApiSuccessResponse<T> {
  success: true;
  message: string;
  data: T;
}

interface ApiErrorDetail {
  loc: string[];
  msg: string;
  type: string;
}

interface ApiErrorResponse {
  success: false;
  message: string;
  details?: ApiErrorDetail[];
}

type ApiResponse<T> = ApiSuccessResponse<T> | ApiErrorResponse;

// Example usage
try {
  const response = await apiRequest<ApiResponse<CompanyData>>(`/market-data/company/${symbol}`);
  
  if (response.success) {
    // Process successful response
    console.log(response.data.financial_data);
  } else {
    // This should never execute due to error handling in apiRequest
    console.error(response.message);
  }
} catch (error) {
  // Handle error
  console.error(error.message);
  
  if (error.details) {
    for (const detail of error.details) {
      console.error(`Error in ${detail.loc.join('.')}: ${detail.msg}`);
    }
  }
}
```

## Error Handling

### Backend Error Handling

```python
from fastapi import HTTPException
from starlette.status import HTTP_400_BAD_REQUEST, HTTP_500_INTERNAL_SERVER_ERROR
from typing import List, Optional
from pydantic import BaseModel

class ErrorDetail(BaseModel):
    loc: List[str]
    msg: str
    type: str

class ErrorResponse(BaseModel):
    success: bool = False
    message: str
    details: Optional[List[ErrorDetail]] = None

def create_error_response(message: str, status_code: int = HTTP_400_BAD_REQUEST, details: Optional[List[ErrorDetail]] = None):
    """Create a standardized error response"""
    return JSONResponse(
        status_code=status_code,
        content=ErrorResponse(
            success=False,
            message=message,
            details=details
        ).dict()
    )

# Example usage in an endpoint
@router.post("/scrape")
async def scrape_stock(stock_request: StockRequest):
    try:
        # Implementation
        pass
    except ValidationError as e:
        # Convert validation error to standard format
        details = [
            ErrorDetail(
                loc=[".".join(str(loc) for loc in err["loc"])],
                msg=err["msg"],
                type=err["type"]
            )
            for err in e.errors()
        ]
        return create_error_response("Validation error", HTTP_400_BAD_REQUEST, details)
    except Exception as e:
        # Log the error
        logger.exception("Error during scraping")
        return create_error_response(
            f"An error occurred: {str(e)}", 
            HTTP_500_INTERNAL_SERVER_ERROR
        )
```

### Frontend Error Handling

```typescript
// Standard error handler
function handleApiError(error: any, setErrorMessage: (msg: string) => void, setToast?: (toast: ToastProps) => void) {
  console.error('API Error:', error);
  
  let errorMsg = 'An unexpected error occurred';
  
  if (error.message) {
    errorMsg = error.message;
  }
  
  setErrorMessage(errorMsg);
  
  if (setToast) {
    setToast({
      type: 'error',
      message: errorMsg
    });
  }
  
  // Additional handling for specific error types
  if (error.details) {
    // Handle field-specific errors
    const fieldErrors = {};
    
    for (const detail of error.details) {
      const field = detail.loc[detail.loc.length - 1];
      fieldErrors[field] = detail.msg;
    }
    
    // Could return field errors for form handling
    return fieldErrors;
  }
  
  return null;
}
```

## Request and Response Validation

### Backend Validation

```python
from pydantic import BaseModel, Field, validator
from typing import Optional, List
import re

class StockRequest(BaseModel):
    stock: str = Field(..., min_length=1)
    
    @validator('stock')
    def validate_stock_symbol(cls, v):
        if not re.match(r'^[A-Z0-9]+$', v):
            raise ValueError('Stock symbol must contain only uppercase letters and numbers')
        return v
```

### Frontend Validation

```typescript
import * as Yup from 'yup';

// Form validation schema
const stockFormSchema = Yup.object({
  stock: Yup.string()
    .required('Stock symbol is required')
    .matches(/^[A-Z0-9]+$/, 'Stock symbol must contain only uppercase letters and numbers')
});

// Example usage with a form
const { values, errors, handleChange, handleSubmit } = useFormik({
  initialValues: { stock: '' },
  validationSchema: stockFormSchema,
  onSubmit: async (values) => {
    try {
      const response = await apiRequest<ApiResponse<ScrapeResult>>(
        '/scraper/scrape',
        'POST',
        values
      );
      
      // Handle success
      showSuccessToast(response.message);
    } catch (error) {
      // Handle error using standard error handler
      handleApiError(error, setErrorMessage, showToast);
    }
  }
});
```

## Best Practices

1. **Consistent Response Structure**: Always follow the standard response format
2. **Appropriate Status Codes**: Use correct HTTP status codes for different scenarios
3. **Comprehensive Error Details**: Provide detailed error information
4. **Input Validation**: Validate all input on both frontend and backend
5. **Versioning**: Version APIs to support backward compatibility
6. **Documentation**: Keep API documentation up to date
7. **Authentication**: Include proper authentication in all requests
8. **Rate Limiting**: Apply and document rate limits
9. **Testing**: Test all API endpoints with various scenarios
10. **Performance**: Monitor and optimize API performance

## Related Rules

- See [api-documentation-rule.mdc] for documentation requirements
- See [error-handling-rule.mdc] for error handling guidelines
- See [integration-testing-rule.mdc] for testing guidelines
- See [backend-integration-rule.mdc] for frontend-backend integration