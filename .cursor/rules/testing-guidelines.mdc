---
description: Testing Guidelines
globs: tests/*.py
alwaysApply: false
---
---
description: Testing Guidelines
globs: tests/*.py
alwaysApply: false
---

# Testing Guidelines

## Purpose
This rule provides guidance on how to effectively test the StockAnalysis application, with a focus on maintaining high code quality and reliability.

## Key Principles
- ✓ Organize tests by component or functionality in the `tests/` directory
- ✓ Follow the Arrange-Act-Assert pattern in test implementation
- ✓ Use mock objects for external dependencies
- ✓ Test both success and error cases
- ✓ For database validation, use direct MongoDB validation rather than test files
- ✓ Keep tests isolated from production data

## Test Coverage Requirements
- API endpoints: 90% coverage
- Services: 85% coverage
- Utilities: 80% coverage

## Test File Structure
```python
"""
Test module for [component].
"""
import pytest
from src.component import Component

def test_specific_functionality():
    """Test that [specific functionality] works as expected."""
    # Arrange
    component = Component()
    
    # Act
    result = component.method()
    
    # Assert
    assert result == expected_result
```

## Resource Management
```python
# Initialize resources to None at the beginning
driver = None
db_client = None

try:
    # Initialize resources inside try block
    db_client = AsyncIOMotorClient(MONGO_URL)
    driver = setup_webdriver()
    
    # Test code here
    
except Exception as e:
    logger.error(f"Test error: {str(e)}")
    assert False, f"Test failed: {str(e)}"
finally:
    # Safely clean up resources
    if driver:
        driver.quit()
    if db_client:
        try:
            await db_client.close()
        except Exception as e:
            logger.warning(f"Error closing DB connection: {e}")
    logger.info("Test resources cleaned up")
```

## Database Testing
For database validation, refer to the `database-validation.mdc` rule which provides:
- Commands for using MongoDB shell directly
- API-based validation techniques
- Automated validation using the utility script

## Test Isolation
```python
# Set up MongoDB connection - for verification only, not for saving data
db_client = AsyncIOMotorClient(mongo_uri)
db = client.stock_data
collection = db.detailed_financials

# Run the scraper without passing the MongoDB collection to avoid saving data
results = await scrape_function(url, None)  # Pass None instead of collection

# Verify data was not written (check count before/after)
count_before = await collection.count_documents({})
# Run test operations
count_after = await collection.count_documents({})
assert count_before == count_after, "Test should not write to database"
```

## Async Testing Best Practices
- Always initialize async resources to None before try blocks
- Use try/except/finally for proper resource cleanup
- Check if resources exist before awaiting them
- Handle exceptions during resource cleanup
- For test fixtures, use pytest-asyncio's async fixtures

## API Testing Example
```python
def test_get_stock_endpoint():
    """Test the GET /api/v1/stock/{symbol} endpoint."""
    # Arrange
    symbol = "AAPL"
    
    # Act
    response = client.get(f"/api/v1/stock/{symbol}")
    
    # Assert
    assert response.status_code == 200
    assert "company_name" in response.json()
    assert "financial_metrics" in response.json()
```

These guidelines ensure consistent and effective testing across the application.
