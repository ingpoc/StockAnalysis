---
description: Error Handling and Response Format Rules
globs: src/**/*.py, tests/**/*.py
alwaysApply: false
---
 ---
description: Error Handling and Response Format Rules
globs: src/**/*.py, tests/**/*.py
alwaysApply: true
version: 1.0.0
last_updated: 2024-03-02
---

# Error Handling and Response Format Rules

## Purpose
This document provides guidelines for consistent error handling and response formatting in the StockAnalysis backend to ensure proper integration with the frontend.

## Key Principles
- ✓ Use standardized error response formats across all API endpoints
- ✓ Implement robust exception handling with appropriate logging
- ✓ Properly clean up resources even when errors occur
- ✓ Provide clear, actionable error messages
- ✓ Use consistent HTTP status codes for similar error scenarios
- ✓ Return informative responses that can be parsed by the frontend

## Standard Response Format

All API endpoints should return responses in a consistent format:

```python
# Success response format
{
    "success": True,
    "message": "Operation completed successfully",
    "data": {}, # or []
    # Optional additional fields specific to the endpoint
}

# Error response format
{
    "success": False,
    "message": "Clear error message describing what went wrong",
    "data": None,
    # Optional additional fields like error_code, etc.
}
```

## Exception Handling Pattern

Always use this pattern for exception handling in API endpoints:

```python
@router.post("/endpoint")
async def endpoint_handler(request_data: RequestModel, db=Depends(get_database)):
    """
    Endpoint docstring with description, parameters, and return format.
    """
    try:
        # Implementation logic
        result = await process_request(request_data, db)
        
        return {
            "success": True,
            "message": "Operation completed successfully",
            "data": result
        }
    
    except ValueError as e:
        # Handle validation errors
        logger.warning(f"Validation error in endpoint_handler: {str(e)}")
        return {
            "success": False,
            "message": str(e),
            "data": None
        }
    
    except Exception as e:
        # Handle unexpected errors
        logger.error(f"Error in endpoint_handler: {str(e)}", exc_info=True)
        return {
            "success": False,
            "message": f"An unexpected error occurred: {str(e)}",
            "data": None
        }
```

## Resource Cleanup

Always use try/except/finally for operations that require resource cleanup:

```python
async def operation_with_resources():
    resource = None
    try:
        # Initialize resource
        resource = await initialize_resource()
        
        # Use resource
        result = await resource.process()
        return result
        
    except Exception as e:
        logger.error(f"Error during operation: {str(e)}")
        raise
    finally:
        # Clean up resource safely
        if resource:
            try:
                await resource.close()
            except Exception as e:
                logger.warning(f"Error during resource cleanup: {str(e)}")
```

## HTTP Status Codes

Use appropriate HTTP status codes for different error scenarios:

```python
# 400 Bad Request - Client sent invalid data
@router.post("/endpoint")
async def endpoint_with_status_codes(request: RequestModel):
    if not validate_request(request):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid request parameters"
        )
    
    # 404 Not Found - Resource doesn't exist
    resource = await find_resource(request.id)
    if not resource:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Resource with id {request.id} not found"
        )
    
    # 403 Forbidden - Authentication issue
    if not has_permission(request.user_id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You don't have permission to access this resource"
        )
    
    # Implementation for successful case
    # ...
```

## API Endpoint Error Handling

For API endpoints that don't use HTTPException, follow this pattern for consistent responses:

```python
@router.post("/example-endpoint")
async def example_endpoint(request_data: dict, db=Depends(get_database)):
    """
    Example endpoint with standardized error handling.
    """
    try:
        # Extract required parameters
        if "required_param" not in request_data:
            logger.warning("Missing required parameter")
            return {
                "success": False,
                "message": "Required parameter is missing",
                "data": None
            }
            
        # Process the request
        result = await process_data(request_data, db)
        
        # Return success response
        return {
            "success": True,
            "message": "Operation completed successfully",
            "data": result
        }
    
    except Exception as e:
        # Log the error with full traceback for debugging
        logger.error(f"Error in example_endpoint: {str(e)}", exc_info=True)
        
        # Return error response
        return {
            "success": False,
            "message": f"Error processing request: {str(e)}",
            "data": None
        }
```

## Validation and Error Messages

Follow these guidelines for validation and error messages:

1. Validate all input parameters before processing
2. Return specific, actionable error messages
3. Include contextual information (e.g., which parameter was invalid)
4. Don't expose sensitive information in error messages
5. Use consistent terminology in error messages
6. Log detailed information for debugging but provide user-friendly messages in responses

## Error Logging Best Practices

1. Log exceptions with `exc_info=True` to capture the full stack trace
2. Include context information in log messages (function name, parameters, etc.)
3. Use appropriate log levels:
   - DEBUG: Detailed debugging information
   - INFO: Confirmation that things are working as expected
   - WARNING: Something unexpected happened but the application can continue
   - ERROR: Serious problem that prevents some functionality from working
   - CRITICAL: Very serious error that may prevent the application from running
4. Structure logs to be easily searchable and parseable
5. Include identifiers (request IDs, operation IDs) in logs for traceability

## Integration with Frontend

This error handling approach ensures that the frontend can:
1. Consistently parse error responses
2. Display appropriate error messages to users
3. Implement retry logic where appropriate
4. Log errors with sufficient context for debugging

See the [api-contract-rule.mdc] for more details on ensuring consistent API contracts between frontend and backend.