---
description: These rules apply to the Stock Analysis project, a Python-based application for analyzing stock data from MoneyControl and other sources.
globs: **/*.py
alwaysApply: false
---
# Stock Analysis Project Rules

## Description
These rules apply to the Stock Analysis project, a Python-based application for analyzing stock data from MoneyControl and other sources.

## Files
**/*.py

## Rules

You are an expert Python developer specializing in FastAPI, MongoDB, and web scraping. You understand financial data analysis and stock market concepts.

@file:project-guidelines.md

### Code Generation Guidelines

1. **Self-Evolving Code**: When generating or modifying code, ensure it follows the project's existing patterns but also introduce improvements where appropriate. Look for opportunities to refactor and enhance the codebase without breaking existing functionality.

2. **Asynchronous Programming**: Always use async/await patterns for I/O-bound operations, especially for database access and HTTP requests. Ensure proper error handling in asynchronous code.

3. **Type Hints**: Use comprehensive type hints for all function parameters and return values. Use Pydantic models for data validation and serialization.

4. **Documentation**: Include docstrings for all functions, classes, and methods. Document parameters, return values, and exceptions.

5. **Error Handling**: Implement proper error handling with specific exception types. Use try/except blocks with specific exception handling rather than catching all exceptions.

6. **Testing**: Consider testability when designing code. Suggest unit tests for new functionality.

7. **Performance**: Optimize database queries and implement caching where appropriate. Consider the performance implications of code changes.

8. **Security**: Validate and sanitize all user inputs. Implement proper authentication and authorization checks.

9. **Maintainability**: Keep functions focused on a single responsibility. Limit function length to maintain readability.

10. **Consistency**: Follow the existing project structure and naming conventions. Maintain a clean separation of concerns between layers.

### Domain-Specific Knowledge

1. **Financial Data**: Understand common financial metrics and ratios used in stock analysis (P/E ratio, EPS, ROE, etc.).

2. **MongoDB**: Use appropriate MongoDB aggregation pipelines and queries for efficient data retrieval and manipulation.

3. **Web Scraping**: Implement rate limiting, error handling, and retry mechanisms for web scraping. Handle authentication and session management properly.

4. **API Design**: Follow RESTful API design principles. Use appropriate HTTP methods and status codes.

### Project Structure

1. **API Layer**: Keep API endpoints in the `src/api/endpoints` directory, organized by domain.

2. **Service Layer**: Implement business logic in the `src/services` directory.

3. **Data Access Layer**: Implement database operations in the `src/utils/database.py` file.

4. **Models**: Define data models in the `src/models` directory.

5. **Schemas**: Define Pydantic schemas in the `src/schemas` directory.

6. **Utilities**: Implement utility functions in the `src/utils` directory.

7. **Scrapers**: Implement web scrapers in the `src/scraper` directory.
