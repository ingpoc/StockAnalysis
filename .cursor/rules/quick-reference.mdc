---
description: Quick Reference Guide for StockAnalysis
globs: src/**/*.py
alwaysApply: true
---
---
description: Quick Reference Guide for StockAnalysis
globs: src/**/*.py
alwaysApply: true
---

# StockAnalysis Quick Reference

## Purpose
This rule provides a concise summary of all development guidelines for the StockAnalysis project, with links to detailed rules.

## Project Structure
```
StockAnalysis/
├── src/                # Source code
├── tests/              # Test files
├── tools/scripts/      # Utility scripts
├── logs/               # Log files
├── db_backups/         # Database backups
├── docs/               # Documentation
```

## Key Guidelines

### Development
- ✓ Place files in appropriate directories (see structure above)
- ✓ Use absolute imports: `from src.module import Component`
- ✓ Implement proper error handling and logging
- ✓ Use async operations throughout the application
- ✓ See `ai-guidelines.mdc` for detailed development guidelines

### Error Handling and Debugging
- ✓ Initialize resources to None before try blocks
- ✓ Use try/except/finally for resource management
- ✓ Check for None before calling methods on objects
- ✓ Implement multiple fallback strategies for data extraction
- ✓ Log detailed information at each step of the process
- ✓ See `debugging-guidelines.mdc` for comprehensive error handling

### Database Operations
- ✓ MongoDB collections: `detailed_financials`, `ai_analysis`, `holdings`, `ipo_data`, `settings`
- ✓ For validation, use MongoDB shell or the validation script
- ✓ Ensure data integrity with proper field validation
- ✓ Handle database connections safely in try/finally blocks
- ✓ See `database-validation.mdc` for detailed validation guidelines

### Testing
- ✓ Place tests in the `tests/` directory with `test_` prefix
- ✓ For database testing, prefer direct MongoDB validation
- ✓ Keep tests isolated from production data (pass None to avoid DB writes)
- ✓ Use the validation utility script for comprehensive checks
- ✓ See `testing-guidelines.mdc` for detailed testing guidelines

### Web Scraping
- ✓ Implement multiple fallback strategies for data extraction
- ✓ Take screenshots for debugging UI interactions
- ✓ Properly manage WebDriver resources in finally blocks
- ✓ Use explicit waits for dynamic content
- ✓ See `scraper-data.mdc` for detailed scraping guidelines

### Utility Scripts
- ✓ Place scripts in `tools/scripts/` with appropriate prefixes
- ✓ For database validation, use `validate_database.py`
- ✓ Implement proper logging and error handling
- ✓ See `utility-scripts.mdc` for detailed script guidelines

### Data-Specific Guidelines
- ✓ Stock Data: See `stock-data.mdc` for stock models and endpoints
- ✓ AI Analysis: See `aianalysis-data.mdc` for analysis models and AI integration
- ✓ Market Data: See `market-data.mdc` for market indices and sector data
- ✓ Portfolio: See `portfolio-data.mdc` for user holdings management
- ✓ Web Scraper: See `scraper-data.mdc` for financial data scraping guidelines

## Quick Database Validation
```bash
# Using MongoDB shell
mongosh
use stock_data
db.detailed_financials.findOne({symbol: "AAPL"})

# Using validation script
python -m tools.scripts.validate_database
```

## Quick API Testing
```bash
# Using curl
curl -X GET "http://localhost:8000/api/v1/stock/AAPL"
```

## Resource Management Pattern
```python
# Always initialize resources to None
driver = None
db_client = None

try:
    # Initialize resources
    driver = setup_webdriver()
    db_client = AsyncIOMotorClient(MONGO_URL)
    
    # Use resources
    
except Exception as e:
    logger.error(f"Operation failed: {e}")
finally:
    # Clean up resources safely
    if driver:
        driver.quit()
    if db_client:
        try:
            await db_client.close()
        except Exception as e:
            logger.warning(f"Error closing resource: {e}")
```

For more detailed guidelines, refer to the specific rule files in the `.cursor/rules/` directory.